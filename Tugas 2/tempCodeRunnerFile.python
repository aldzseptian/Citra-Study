import numpy as np
import matplotlib.pyplot as plt
import cv2
from sklearn.cluster import MiniBatchKMeans

# Fungsi untuk menampilkan gambar
def show_image(image, title=''):
    plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
    plt.title(title)
    plt.axis('off')
    plt.show()

# Load gambar
image_path = input("686027dc0db04ae6272ac72b6a7ed195.jpg")
image = cv2.imread(image_path)

# Tampilkan gambar asli
show_image(image, 'Original Image')

# Mengurangi ukuran gambar untuk mempercepat proses
scale_percent = 30  # Persentase untuk mengurangi ukuran gambar
width = int(image.shape[1] * scale_percent / 100)
height = int(image.shape[0] * scale_percent / 100)
dim = (width, height)
resized_image = cv2.resize(image, dim, interpolation=cv2.INTER_AREA)

# Ubah gambar ke format data untuk K-Means
image_data = resized_image.reshape((-1, 3))  # Ubah bentuk gambar menjadi (jumlah piksel, 3 warna)

# Normalisasi data
image_data = np.float32(image_data) / 255.0

# Jumlah kluster
k = 3

# Menerapkan MiniBatch K-Means
mini_kmeans = MiniBatchKMeans(n_clusters=k, batch_size=100)
mini_kmeans.fit(image_data)

# Mendapatkan warna dominan dari kluster
centers = mini_kmeans.cluster_centers_
labels = mini_kmeans.labels_

# Mengganti setiap piksel dengan warna pusat kluster
segmented_image = centers[labels].reshape(resized_image.shape)

# Tampilkan gambar yang telah dikelompokkan
show_image(segmented_image.astype(np.uint8), 'Segmented Image')

# Tampilkan pusat warna kluster
print("Pusat warna kluster:")
for i, center in enumerate(centers):
    print(f"Kluster {i + 1}: R={int(center[0]*255)}, G={int(center[1]*255)}, B={int(center[2]*255)}")
